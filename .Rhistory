names(wdi)
library(dplyr)
library(tidyr)
wdi %>%
gather(Year, value, -Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code) %>%
spread(Indicator.Name, value)
library(data.table)
library(data.table)
wdi = read.csv('~/data/WDIEXCEL.xlsx')
wdi = read.csv('~/data/wdi.csv')
dcast(melt(setDT(df), id.var=c("Indicator.Name", 'Indicator.Code' "Country.Name", 'Country.Code'),
variable.name="year"),
Country+year~Indicator.Name, value.var='value')
dcast(melt(setDT(df), id.var=c("Indicator.Name", 'Indicator.Code', "Country.Name", 'Country.Code'),
variable.name="year"),
Country+year~Indicator.Name, value.var='value')
library(reshape2)
cast(melt(setDT(df), id.var=c("Indicator.Name", 'Indicator.Code', "Country.Name", 'Country.Code'),
variable.name="year"),
Country.Name+Country.Code+year~Indicator.Name +Indicator.Code, value.var='value')
wdi_cast <-cast(melt(setDT(df), id.var=c("Indicator.Name", 'Indicator.Code', "Country.Name", 'Country.Code'),
variable.name="year"),
Country.Name+Country.Code+year~Indicator.Name +Indicator.Code, value.var='value')
wdi_cast <-dcast(melt(setDT(df), id.var=c("Indicator.Name", 'Indicator.Code', "Country.Name", 'Country.Code'),
variable.name="year"),
Country.Name+Country.Code+year~Indicator.Name +Indicator.Code, value.var='value')
library(reshape2)
wdi = read.csv('~/data/wdi.csv')
wdi_cast <-dcast(melt(setDT(df), id.var=c("Indicator.Name", 'Indicator.Code', "Country.Name", 'Country.Code'),
variable.name="year"),
Country.Name+Country.Code+year~Indicator.Name +Indicator.Code, value.var='value')
library(dplyr)
library(tidyr)
wdi_1 = read.csv('~/data/wdi_1.csv')
wdi_1 %>%
gather(year, value, -Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code) %>%
spread(Indicator.Name, value)
source('~/.active-rstudio-document', echo=TRUE)
wdi_1 = read.csv('~/data/wdi.csv')
wdi_1 %>%
gather(Year, value, -Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code) %>%
spread(Indicator, value)
wdi_1 %>%
gather(Year, value, -Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code) %>%
spread(Indicator.Name, value)
wdi_1 = read.csv('~/data/wdi.csv')
wdi_1 %>%
gather(Year, value, -Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code) %>%
spread(Indicator.Name, value)
wdi_1 = read.csv('~/data/wdi.csv_1')
wdi_1 = read.csv('~/data/wdi_1.csv')
dim(wdi_1)
wdi_1 = read.csv('~/data/wdi_1.csv')
wdi_1 %>%
gather(Year, value, -Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code) %>%
spread(Indicator.Name, value)
head(wdi_1)
wdi_1 %>%
gather(Year, value, -Country.Name, -Country.Code, -Indicator.Name, -Indicator.Code) %>%
spread(Indicator.Name, value
)
library(wbstats)
library(reshape2)
library(ggplot2)
library(tidyverse)
new_wb_cache <- wbcache()
wbsearch("gdp.*capita.*US\\$", cache = new_wb_cache)
wbsearch("life expectancy at birth.*total", cache = new_wb_cache)
wbsearch("^mortality.*rate.*infant", cache = new_wb_cache)
wbsearch("^maternal*", cache = new_wb_cache)
wbsearch("^urban.*population", cache = new_wb_cache)
wbsearch("^employment.*agriculture", cache = new_wb_cache)
wbsearch("Net ODA provided, total", cache = new_wb_cache)
wbsearch("^literacy.*male", cache = new_wb_cache)
wb_dat <- wb(indicator = c('SP.URB.TOTL.IN.ZS' , 'SL.AGR.EMPL.ZS' , 'SE.ADT.LITR.MA.ZS' , 'SP.DYN.IMRT.IN' , 'SP.DYN.LE00.IN', 'NY.GDP.PCAP.KD' , 'DC.ODA.TOTL.GN.ZS' , 'SH.STA.MMRT') )
wb_countries <- wbcountries()
names(wb_countries)
wb_dat <- merge(wb_dat, y = wb_countries[c("iso2c", "region")], by = "iso2c", all.x = TRUE)
head(wb_dat)
wb_dat <- subset(wb_dat, region != "Aggregates") # this also removes NAs
wb_dat$indicatorID[wb_dat$indicatorID == 'SP.URB.TOTL.IN.ZS']   <- 'urb_pop'
wb_dat$indicatorID[wb_dat$indicatorID == 'SL.AGR.EMPL.ZS']      <- 'ag_emp'
wb_dat$indicatorID[wb_dat$indicatorID == 'SE.ADT.LITR.MA.ZS']   <- 'lit_male'
wb_dat$indicatorID[wb_dat$indicatorID == 'SP.DYN.IMRT.IN']      <- 'inf_mort'
wb_dat$indicatorID[wb_dat$indicatorID == 'SP.DYN.LE00.IN']      <- 'life_exp'
wb_dat$indicatorID[wb_dat$indicatorID == 'NY.GDP.PCAP.KD']      <- 'gdp_cap'
wb_dat$indicatorID[wb_dat$indicatorID == 'DC.ODA.TOTL.GN.ZS']   <- 'oda_pct'
wb_dat$indicatorID[wb_dat$indicatorID == 'SH.STA.MMRT']         <- 'mmr'
wb_dat <- dcast(wb_dat, iso2c + country + date + region ~ indicatorID,  value.var = 'value')
write.csv(wb_dat, file = '~/data/temp_wdi/wdi.csv')
g = ggplot(data = wdi,
aes(gdp_cap, mmr)) +
geom_smooth() +
)
g = ggplot(data = wdi,
aes(gdp_cap, mmr)) +
geom_smooth()
)
g = ggplot(data = wdi,
aes(gdp_cap, mmr) +
geom_smooth()
)
g = ggplot(data = wdi +
aes(gdp_cap, mmr) +
geom_smooth()
)
g = ggplot(data = wdi +
geom_smooth(mapping = aes(gdp_cap, mmr)) +
geom_point(mapping = aes(gdp_cap, mmr))
)
g = ggplot(data = wb_dat +
geom_smooth(mapping = aes(gdp_cap, mmr)) +
geom_point(mapping = aes(gdp_cap, mmr))
)
head(wb_dat)
tail(wb_dat)
summary(wb_dat)
g = ggplot(data = wb_dat +
geom_smooth(mapping = aes(gdp_cap, mmr)) +
geom_point(mapping = aes(gdp_cap, mmr))
)
g = ggplot(data = wb_dat) +
geom_smooth(mapping = aes(gdp_cap, mmr)) +
geom_point(mapping = aes(gdp_cap, mmr))
)
g = ggplot(data = wb_dat) +
geom_smooth(mapping = aes(gdp_cap, mmr)) +
geom_point(mapping = aes(gdp_cap, mmr))
g
g = ggplot(data = wb_dat, mapping = aes(gdp_cap, mmr)) +
geom_smooth()
geom_point()
g
g = ggplot(data = wb_dat, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point()
g
g = ggplot(data = wb_dat, mapping = aes(gdp_cap, mmr)) +
geom_smooth()
g
g = ggplot(data = wb_dat, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .1)
g
g = ggplot(data = wb_dat, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .5)
g
g = ggplot(data = wb_dat, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .01)
g
g = ggplot(data = wb_dat, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
g = ggplot(data = wb_dat[wb_dat$gdp_cap < 50000], mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
wdi <- tibble(wb_dat)
wdi <- as_tibble(wb_dat)
head(wdi)
wdi_gdp_lt_50000 <- filter(wdi, gdp_cap < 50000)
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_wrap(~year, nrow = 25)
g
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_grid(~year .)
g
head(wdi)
rename(wdi, year = date)
wdi_gdp_lt_50000 <- filter(wdi, gdp_cap < 50000)
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_grid(~year .)
g
wdi <- as_tibble(wb_dat)
head(wdi)
rename(wdi, year = date)
wdi_gdp_lt_50000 <- filter(wdi, gdp_cap < 50000)
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_grid(~year .)
g
head(wdi)
rename(wdi, year = date)
head(wdi)
wdi$year <- wdi$date
wdi_gdp_lt_50000 <- filter(wdi, gdp_cap < 50000)
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_grid(~year .)
g
head(wdi)
wdi$year <- int(wdi$date)
wdi$year <- as.integer(wdi$date)
wdi_gdp_lt_50000 <- filter(wdi, gdp_cap < 50000)
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_grid(~year .)
g
head(wdi)
wdi$date <- as.integer(wdi$date)
wdi_gdp_lt_50000 <- filter(wdi, gdp_cap < 50000)
wdi_gdp_lt_50000 <- filter(wdi, gdp_cap < 50000)
wdi$date <- as.integer(wdi$date)
head(wdi)
wdi_gdp_lt_50000 <- filter(wdi, gdp_cap < 50000)
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_grid(~date .)
g
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_grid(~date .)
g
wdi$date <- as.integer(wdi$date)
wdi_gdp_lt_50000 <- filter(wdi, gdp_cap < 50000)
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_grid(~date .)
g
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_grid(date~ .)
g
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
facet_wrap(date~ ., nrows=25)
g
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05) +
g
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(urb_pop, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
g = ggplot(data = wdi_gdp_lt_50000, mapping = aes(ag_emp, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
wdi_mmr_gt_100 <- filter(wdi, mmr > 100)
g = ggplot(data = wdi_mmr_gt_100, mapping = aes(ag_emp, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
g = ggplot(data = wdi_mmr_gt_100, mapping = aes(urb_pop, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
g = ggplot(data = wdi_mmr_gt_100, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
wdi_mmr_gt_200 <- filter(wdi, mmr > 100)
g = ggplot(data = wdi_mmr_gt_200, mapping = aes(gdp_cap, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
g = ggplot(data = wdi_mmr_gt_200, mapping = aes(urb_pop, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
g = ggplot(data = wdi_mmr_gt_200, mapping = aes(ag_emp, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
g = ggplot(data = wdi_mmr_gt_200, mapping = aes(life_exp, mmr)) +
geom_smooth() +
geom_point(alpha = .05)
g
setwd("~/data/geo/mmr")
library(ggplot2)
library(rgdal)
# get shapefile for world map
download.file("https://opendata.arcgis.com/datasets/252471276c9941729543be8789e06e12_0.zip", destfile="countries.zip")
unzip("countries.zip")
world.map <- readOGR(dsn=".", layer = "UIA_World_Countries_Boundaries")
world.map.df <- fortify(world.map)
head(world.map.df)
head(world.map.df@data)
head(world.map@data)
world.map@data$id <- rownames(world.map@data)
world.map.df <- join(world.map.df, world.map@data, by="id")
library(dplyr)
world.map.df <- join(world.map.df, world.map@data, by="id")
library(plyr)
world.map.df <- join(world.map.df, world.map@data, by="id")
iso_2_iso_3 <- read.csv("iso_2_iso_3.csv")
iso_2_iso_3$ISO <- iso_2_iso_3$ISO2
merge(iso_2_iso_3, mmr_data, by="ISO")
# read in maternal mortality data
mmr_data <- read.csv('mmr_data.csv')
merge(iso_2_iso_3, mmr_data, by="ISO")
iso_2_iso_3$ISO <- iso_2_iso_3$ISO
mmr_data <- merge(iso_2_iso_3, mmr_data, by="ISO")
iso_2_iso_3$ISO <- iso_2_iso_3$ISO
mmr_data <- merge(iso_2_iso_3, mmr_data, by.x="ISO", by.y="ISO2")
head(mmr_data)
mmr_data <- merge(iso_2_iso_3, mmr_data, by.x="ISO", by.y="Country.Code")
head(mmr_data)
iso_2_iso_3$ISO <- iso_2_iso_3$ISO2
mmr_data <- merge(iso_2_iso_3, mmr_data, by.x="ISO", by.y="Country.Code")
setwd("~/data/geo/mmr")
library(ggplot2)
library(rgdal)
library(plyr)
# get shapefile for world map
download.file("https://opendata.arcgis.com/datasets/252471276c9941729543be8789e06e12_0.zip", destfile="countries.zip")
unzip("countries.zip")
world.map <- readOGR(dsn=".", layer = "UIA_World_Countries_Boundaries")
world.map@data$id <- rownames(world.map@data)
world.map.df <- fortify(world.map)
world.map.df <- join(world.map.df, world.map@data, by="id")
# create a map
map <- ggplot(data = world.map.df, aes(x = long, y = lat, group = group))
# look at the map
map + geom_polygon()
# read in maternal mortality data
mmr_data <- read.csv('mmr_data.csv')
# need to get ISO2 country codes
iso_2_iso_3 <- read.csv("iso_2_iso_3.csv")
iso_2_iso_3$ISO <- iso_2_iso_3$ISO2
mmr_data <- merge(iso_2_iso_3, mmr_data, by.x="ISO", by.y="Country.Code")
head(mmr_data)
mmr_data <- merge(iso_2_iso_3, mmr_data, by.x="ISO3", by.y="Country.Code")
setwd("~/data/geo/mmr")
library(ggplot2)
library(rgdal)
library(plyr)
# get shapefile for world map
download.file("https://opendata.arcgis.com/datasets/252471276c9941729543be8789e06e12_0.zip", destfile="countries.zip")
unzip("countries.zip")
world.map <- readOGR(dsn=".", layer = "UIA_World_Countries_Boundaries")
world.map@data$id <- rownames(world.map@data)
world.map.df <- fortify(world.map)
world.map.df <- join(world.map.df, world.map@data, by="id")
# create a map
map <- ggplot(data = world.map.df, aes(x = long, y = lat, group = group))
# look at the map
map + geom_polygon()
# read in maternal mortality data
mmr_data <- read.csv('mmr_data.csv')
# need to get ISO2 country codes
iso_2_iso_3 <- read.csv("iso_2_iso_3.csv")
iso_2_iso_3$ISO <- iso_2_iso_3$ISO2
mmr_data <- merge(iso_2_iso_3, mmr_data, by.x="ISO3", by.y="Country.Code")
head(mmr_data)
mmr <- merge(world.map.df, mmr_data, by = "ISO")
# fill in polygons
map + geom_polygon(fill = "mmr")
head(mmr)
# fill in polygons
map + geom_polygon(aes(fill = mmr))
# fill in polygons
map + geom_polygon(aes(fill = mmr))
head(mmr)
# fill in polygons
map + geom_polygon(aes(fill = mmr))
# fill in polygons
map + geom_polygon(fill = mmr)
# create a map
map <- ggplot(data = world.map.df, aes(x = long, y = lat, group = group, fill=mmr))
map, ...)
map
# merge maternal mortality data
mmr <- merge(world.map@data, mmr_data, by = "ISO")
mmr <- fortify(mmr)
# create a map
map <- ggplot(data = world.map.df, aes(x = long, y = lat, group = group, fill=mmr))
map, ...)
map
setwd("~/data/geo/mmr")
library(ggplot2)
library(rgdal)
library(plyr)
# get shapefile for world map
download.file("https://opendata.arcgis.com/datasets/252471276c9941729543be8789e06e12_0.zip", destfile="countries.zip")
unzip("countries.zip")
world.map <- readOGR(dsn=".", layer = "UIA_World_Countries_Boundaries")
# read in maternal mortality data
mmr_data <- read.csv('mmr_data.csv')
# need to get ISO2 country codes
iso_2_iso_3 <- read.csv("iso_2_iso_3.csv")
iso_2_iso_3$ISO <- iso_2_iso_3$ISO2
mmr_data <- merge(iso_2_iso_3, mmr_data, by.x="ISO3", by.y="Country.Code")
# merge maternal mortality data
mmr <- merge(world.map@data, mmr_data, by = "ISO")
mmr <- fortify(mmr)
# create a map
map <- ggplot(data = world.map.df, aes(x = long, y = lat, group = group, fill=mmr))
# fill in polygons
map + geom_polygon
# fill in polygons
map + geom_polygon()
head(world.map@data)
download.file("http://api.worldbank.org/v2/en/indicator/SH.STA.MMRT?downloadformat=csv", destfile = "mmr.zip")
mmr_files <- unzip("mmr.zip")
mmr_files
mmr_data <- read.csv(mmr.files[2])
mmr.files <- unzip("mmr.zip")
mmr_data <- read.csv(mmr.files[2])
setwd("~/data/geo/mmr")
download.file("http://api.worldbank.org/v2/en/indicator/SH.STA.MMRT?downloadformat=csv", destfile = "mmr.zip")
mmr.files <- unzip("mmr.zip")
mmr_data <- read.csv(mmr.files[2], skip = 2)
mmr_data <- read.csv(mmr.files[2], skip = 3)
mmr.data <- read.csv(mmr.files[2], skip = 3)
head(mmr.data)
mmr.data <- as.data.frame(c(mmr.data$Country.Name, mmr.data$Country.Code, mmr.data$X2015))
head(mmr.data)
mmr.data.name <- mmr.data$Country.Name
mmr.data.code <- mmr.data$Country.Code
mmr.data.mmr <- mmr.data$X2015
mmr.data <- as.data.frame(cbind(mmr.data.name, mmr.data.code. mmr.data.mmr))
mmr.data <- as.data.frame(cbind(mmr.data.name, mmr.data.code, mmr.data.mmr))
head(mmr.data)
head(mmr.data.name)
download.file("https://opendata.arcgis.com/datasets/252471276c9941729543be8789e06e12_0.zip", destfile = "countries.zip")
download.file("http://api.worldbank.org/v2/en/indicator/SH.STA.MMRT?downloadformat=csv", destfile = "mmr.zip")
mmr.files <- unzip("mmr.zip")
unzip("countries.zip")
mmr.data <- read.csv(mmr.files[2], skip = 3, stringsAsFactors = FALSE)
head(mmr.data)
mmr.data.name <- mmr.data$Country.Name
head(mmr.data.name)
mmr.data.code <- mmr.data$Country.Code
mmr.data.mmr <- mmr.data$X2015
head(mmr.data.code)
head(mmr.data.mmr)
mmr.data.df <- as.data.frame(cbind(mmr.data.name, mmr.data.code, mmr.data.mmr))
head(mmr.data.df)
names(mmr.data.df) <- c("Country.Name", "Country.Code", "mmr")
head(mmr.data.df)
world.map <- readOGR(dsn=".", layer = "UIA_World_Countries_Boundaries")
world.map@data$id <- rownames(world.map@data)
world.map.df <- fortify(world.map)
world.map.df <- join(world.map.df, world.map@data, by="id")
# need to get ISO2 country codes
iso_2_iso_3 <- read.csv("iso_2_iso_3.csv")
iso_2_iso_3$ISO <- iso_2_iso_3$ISO2
mmr.data.df <- merge(iso_2_iso_3, mmr.data.df, by.x="ISO3", by.y="Country.Code")
head(mmr.data.df)
# merge maternal mortality data
mmr <- merge(world.map@data, mmr_data, by = "ISO")
# merge maternal mortality data
mmr <- merge(world.map, mmr.data.df, by = "ISO")
head(mmr)
mmr <- fortify(mmr)
# create a map
map <- ggplot(data = mmr, aes(x = long, y = lat, group = group, fill=mmr))
mmr
map
# create a map
map <- ggplot(data = mmr, aes(x = long, y = lat, group = group, fill = mmr) + geom_polygon())
# create a map
map <- ggplot(data = mmr, aes(x = long, y = lat, group = group) + geom_polygon(fill = mmr))
download.file("https://drive.google.com/file/d/1vv1qy2hGSgSmO-p_D0wZYAJkVc4JKeu6/view?usp=sharing", destfile = "iso_2_iso_3.csv")
head(mmr)
setwd("~/data/geo/mmr")
library(ggplot2)
library(rgdal)
library(plyr)
# get shapefile for world map and data file for maternal mortality
download.file("https://opendata.arcgis.com/datasets/252471276c9941729543be8789e06e12_0.zip", destfile = "countries.zip")
download.file("http://api.worldbank.org/v2/en/indicator/SH.STA.MMRT?downloadformat=csv", destfile = "mmr.zip")
download.file("https://drive.google.com/file/d/1vv1qy2hGSgSmO-p_D0wZYAJkVc4JKeu6/view?usp=sharing", destfile = "iso_2_iso_3.csv")
mmr.files <- unzip("mmr.zip")
unzip("countries.zip")
mmr.data <- read.csv(mmr.files[2], skip = 3, stringsAsFactors = FALSE)
mmr.data.name <- mmr.data$Country.Name
mmr.data.code <- mmr.data$Country.Code
mmr.data.mmr <- mmr.data$X2015
mmr.data.df <- as.data.frame(cbind(mmr.data.name, mmr.data.code, mmr.data.mmr))
names(mmr.data.df) <- c("Country.Name", "Country.Code", "mmr")
world.map <- readOGR(dsn=".", layer = "UIA_World_Countries_Boundaries")
world.map@data$id <- rownames(world.map@data)
world.map.df <- fortify(world.map)
# need to get ISO2 country codes
iso_2_iso_3 <- read.csv("iso_2_iso_3.csv")
iso_2_iso_3$ISO <- iso_2_iso_3$ISO2
mmr.data.df <- merge(iso_2_iso_3, mmr.data.df, by.x="ISO3", by.y="Country.Code")
# merge maternal mortality data
mmr <- merge(world.map, mmr.data.df, by = "ISO")
mmr <- fortify(mmr)
# create a map
map <- ggplot(data = mmr, aes(x = long, y = lat, group = group) + geom_polygon(fill = mmr))
# look at the map
map
